{"version":3,"sources":["TogglePower/TogglePower.js","DisplayColor/DisplayColor.js","LightStatus/LightStatus.js","SetBrightness/SetBrightness.js","ListLights/ListLights.js","Authorise/Authorise.js","App.js","reportWebVitals.js","index.js"],"names":["TogglePower","state","lightInfo","props","data","lightID","this","lightLabels","indexOf","name","urlPower","fetch","method","headers","token","then","response","json","powerStatus","catch","error","console","arrIndex","changePower","urlState","body","JSON","stringify","lightState","log","updatePowerValue","updateParentState","index","setState","onGetChildState","className","Button","variant","onClick","lightSwitch","bind","Component","StyledSlider","withStyles","root","color","track","height","background","rail","thumb","marginTop","border","backgroundColor","Slider","DisplayColor","lightColor","updateColorValue","colorVal","value","event","switchColor","Typography","id","gutterBottom","defaultValue","getAriaValueText","valuetext","onChangeCommitted","sliderChange","aria-labelledby","step","marks","min","max","valueLabelDisplay","StyledGrid","theme","width","palette","divider","margin","borderRadius","shape","paper","text","secondary","spacing","Grid","LightStatus","kelvinNumber","iconColor","iconSelector","container","alignItems","style","padding","textDecoration","Divider","orientation","flexItem","fontSize","marginBottom","SetBrightness","brightness","brightnessVal","brightnessSet","ListLights","apiKey","getData","lightProps","i","length","joined","concat","Accordion","map","listitem","Card","Header","Toggle","as","eventKey","toString","Collapse","Body","getChildState","Authorise","cookies","get","authorised","display","target","set","path","maxAge","secure","ok","alert","Error","status","jsonResponse","displayComponent","Form","Group","controlId","Label","Control","type","placeholder","onChange","onInputChange","Text","onKeySubmit","withCookies","App","CookiesProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73061bfb.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass TogglePower extends Component{\r\n    state = {\r\n        lightInfo: this.props.data.lightInfo,\r\n    }\r\n\r\n    \r\n\r\n    togglePower(){\r\n        const lightID = this.props.data.lightInfo[this.props.data.lightLabels.indexOf(this.props.name)]['id'];\r\n        const urlPower = `https://api.lifx.com/v1/lights/${lightID}/toggle`;\r\n        fetch(urlPower, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': this.props.data.token\r\n            },\r\n          })\r\n            .then(response => response.json())\r\n            .then((powerStatus) => {\r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n    }\r\n\r\n    lightSwitch(){\r\n        // Set constants for Light ID, Power Status, and Array Index\r\n        const arrIndex = this.props.data.lightLabels.indexOf(this.props.name)\r\n        const lightID = this.props.data.lightInfo[arrIndex]['id'];\r\n        var powerStatus = this.props.data.lightInfo[arrIndex]['power']\r\n\r\n        // If statement to determine whether to turn light off or on\r\n        const changePower = (powerStatus === \"on\") ? \"off\" : \"on\"\r\n\r\n        // API Call\r\n        const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`;\r\n        const data = {\r\n            \"power\": changePower\r\n        }\r\n        fetch(urlState, {   \r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': this.props.data.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightState) => {\r\n                console.log(lightState['results'])\r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n\r\n        // Update State Object\r\n        this.updatePowerValue(changePower, arrIndex)\r\n\r\n        // Update Parent State\r\n        this.updateParentState()\r\n    }\r\n\r\n    // Method to change the value of the power key\r\n    updatePowerValue(powerStatus, index){\r\n        let lightInfo = this.state.lightInfo;\r\n        lightInfo[index]['power'] = powerStatus;\r\n        this.setState({lightInfo : lightInfo})\r\n    }\r\n\r\n    // Updates the main light state in the parent component\r\n    updateParentState(){\r\n        this.props.onGetChildState(this.state.lightInfo);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-md-center\">\r\n                    <div className=\"col col-md-2\">\r\n                        <Button variant=\"primary\" onClick={this.lightSwitch.bind(this)}>Toggle Power</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TogglePower;","import { Component } from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst StyledSlider = withStyles({\r\n    root: {\r\n      color: \"white\"\r\n    },\r\n    track: {\r\n        height: \"1px\",\r\n        background: \"linear-gradient(90deg, rgba(255,109,0,1) 0%, rgba(255,166,32,1) 16%, rgba(255,198,72,1) 32%, rgba(255,207,151,1) 48%, rgba(254,233,157,1) 64%, rgba(254,248,224,1) 80%, rgba(255,255,255,1) 96%)\",\r\n    },\r\n    rail: {\r\n        background: \"linear-gradient(90deg, rgba(255,109,0,1) 0%, rgba(255,166,32,1) 16%, rgba(255,198,72,1) 32%, rgba(255,207,151,1) 48%, rgba(254,233,157,1) 64%, rgba(254,248,224,1) 80%, rgba(255,255,255,1) 96%)\",\r\n        height: \"10px\",\r\n    },\r\n    thumb: {\r\n        marginTop: .01,\r\n        border: \"1px solid grey\",\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    },\r\n\r\n\r\n  })(Slider);\r\n\r\n\r\n\r\nclass DisplayColor extends Component{\r\n    state = {\r\n        lightColor: \"3500\",\r\n        lightInfo: this.props.data.lightInfo\r\n    }\r\n\r\n\r\n    switchColor(){     \r\n        // Set constants for Light ID and Array Index\r\n        const arrIndex = this.props.data.lightLabels.indexOf(this.props.name)\r\n        const lightID = this.props.data.lightInfo[arrIndex]['id'];   \r\n\r\n        // Set API Call URL\r\n        const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`;\r\n\r\n        // Set data to be updated depending on the selected value on the slider\r\n        const data = {\r\n            \"color\": {\r\n                \"kelvin\": this.state.lightColor\r\n            }\r\n        }\r\n\r\n        // CALL API\r\n        fetch(urlState, {   \r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': this.props.data.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightState) => {\r\n                console.log(lightState['results'])\r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n\r\n            // Update State Object\r\n            this.updateColorValue(this.state.lightColor, arrIndex)\r\n\r\n            // Update Parent State\r\n            this.updateParentState()\r\n    }\r\n\r\n    // Method to change the value of the color key\r\n    updateColorValue(colorVal, index){\r\n        let lightInfo = this.state.lightInfo;\r\n        lightInfo[index]['color']['kelvin'] = colorVal;\r\n        this.setState({lightInfo : lightInfo})\r\n    }\r\n\r\n    // Updates the main light state in the parent component\r\n    updateParentState(){\r\n        this.props.onGetChildState(this.state.lightInfo);\r\n    }\r\n\r\n    valuetext(value) {\r\n        return value;\r\n    }\r\n\r\n    sliderChange(event, value){\r\n        console.log(value)\r\n        this.setState({\r\n            lightColor: value\r\n        })\r\n        this.switchColor()\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {/* <Button variant=\"primary\" onClick={this.switchColor.bind(this)}>Switch Colour</Button> */}\r\n                <Typography id=\"non-linear-slider\" gutterBottom>\r\n                    Switch Color\r\n                </Typography>\r\n                <StyledSlider\r\n                    defaultValue={this.props.data.lightInfo[this.props.data.lightLabels.indexOf(this.props.name)]['color']['kelvin']}\r\n                    getAriaValueText={this.valuetext.bind(this)}\r\n                    onChangeCommitted={this.sliderChange.bind(this)}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={500}\r\n                    marks\r\n                    min={1500}\r\n                    max={4500}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayColor;","import { Component } from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FlashOnRoundedIcon from '@material-ui/icons/FlashOnRounded';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst StyledGrid = withStyles((theme) => ({\r\n    root: {\r\n        width: 'fit-content',\r\n        border: `1px solid ${theme.palette.divider}`,\r\n        margin: \"auto\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.text.secondary,\r\n        '& svg': {\r\n            margin: theme.spacing(1.5),\r\n          },\r\n          '& hr': {\r\n            margin: theme.spacing(0, 0.5),\r\n          },\r\n    }\r\n}))(Grid);\r\n\r\n\r\n\r\n\r\nclass LightStatus extends Component {\r\n\r\n    render(){\r\n        const arrIndex = this.props.data.lightLabels.indexOf(this.props.name);\r\n        const kelvinNumber = this.props.data.lightInfo[arrIndex]['color']['kelvin']\r\n        var iconColor = \"\"\r\n        var iconSelector = \"lightbulb icon\"\r\n\r\n        if (kelvinNumber === 4500){\r\n            iconColor = \"black\"\r\n            iconSelector = \"lightbulb outline icon\"\r\n        } else if (kelvinNumber === 4000){\r\n            iconColor = \"rgb(254,248,224)\"\r\n        } else if (kelvinNumber === 3500){\r\n            iconColor = \"rgb(254,233,157)\"\r\n        } else if (kelvinNumber === 3000){\r\n            iconColor = \"rgb(255,207,151)\"\r\n        } else if (kelvinNumber === 2500){\r\n            iconColor = \"rgb(255,198,72)\"\r\n        } else if (kelvinNumber === 2000){\r\n            iconColor = \"rgb(255,166,32)\"\r\n        } else if (kelvinNumber === 1500){\r\n            iconColor = \"rgb(254,109,0)\"\r\n        }\r\n\r\n        return(            \r\n            <div>\r\n                <StyledGrid container alignItems=\"center\">\r\n                    \r\n                    <Typography style={{padding: \"10px\", color: \"black\", textDecoration: \"none\"}}>{this.props.name}</Typography>\r\n                    <Divider style={{height: \"auto\"}}  orientation=\"vertical\" flexItem />\r\n                    <FlashOnRoundedIcon style={{color: (this.props.data.lightInfo[arrIndex]['power'] === \"on\") ? \"green\" : \"#eb2a2a\", fontSize: \"30px\"}}></FlashOnRoundedIcon>\r\n                    <Divider style={{height: \"auto\"}}  orientation=\"vertical\" flexItem />\r\n                    <i style={{fontSize: \"25px\", marginBottom: \"15px\", color: iconColor}} className={iconSelector}></i>\r\n                </StyledGrid>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LightStatus;","import { Component } from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst StyledSlider = withStyles({\r\n    root: {\r\n    },\r\n    track: {\r\n\r\n    },\r\n    rail: {\r\n\r\n    },\r\n    thumb: {\r\n\r\n    },\r\n\r\n\r\n  })(Slider);\r\n\r\n\r\n\r\nclass SetBrightness extends Component{\r\n    state = {\r\n        brightness: \"1.0\",\r\n        lightInfo: this.props.data.lightInfo\r\n    }\r\n\r\n\r\n    brightnessSet(){     \r\n        // Set constants for Light ID and Array Index\r\n        const arrIndex = this.props.data.lightLabels.indexOf(this.props.name)\r\n        const lightID = this.props.data.lightInfo[arrIndex]['id'];   \r\n\r\n        // Set API Call URL\r\n        const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`;\r\n\r\n        // Set data to be updated depending on the selected value on the slider\r\n        const data = {\r\n            \"brightness\": this.state.brightness\r\n            }\r\n\r\n        // CALL API\r\n        fetch(urlState, {   \r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': this.props.data.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightState) => {\r\n                console.log(lightState['results'])\r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n\r\n            // Update State Object\r\n            this.updateColorValue(this.state.brightness, arrIndex)\r\n\r\n            // Update Parent State\r\n            this.updateParentState()\r\n    }\r\n\r\n    // Method to change the value of the color key\r\n    updateColorValue(brightnessVal, index){\r\n        let lightInfo = this.state.lightInfo;\r\n        lightInfo[index]['brightness'] = brightnessVal;\r\n        this.setState({lightInfo : lightInfo})\r\n    }\r\n\r\n    // Updates the main light state in the parent component\r\n    updateParentState(){\r\n        this.props.onGetChildState(this.state.lightInfo);\r\n    }\r\n\r\n    valuetext(value) {\r\n        return value;\r\n    }\r\n\r\n    sliderChange(event, value){\r\n        console.log(value)\r\n        this.setState({\r\n            brightness: value\r\n        })\r\n        this.brightnessSet()\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {/* <Button variant=\"primary\" onClick={this.brightnessSet.bind(this)}>Set Brightness</Button> */}\r\n                <Typography id=\"non-linear-slider\" gutterBottom>\r\n                    Adjust Brightness\r\n                </Typography>\r\n                <StyledSlider\r\n                    defaultValue={this.props.data.lightInfo[this.props.data.lightLabels.indexOf(this.props.name)]['brightness']}\r\n                    getAriaValueText={this.valuetext.bind(this)}\r\n                    onChangeCommitted={this.sliderChange.bind(this)}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={0.1}\r\n                    marks\r\n                    min={0.0}\r\n                    max={1.0}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SetBrightness;","import { Component } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport TogglePower from \"../TogglePower/TogglePower\";\r\nimport DisplayColor from \"../DisplayColor/DisplayColor\";\r\nimport LightStatus from \"../LightStatus/LightStatus\";\r\nimport SetBrightness from \"../SetBrightness/SetBrightness\";\r\n\r\n\r\nclass ListLights extends Component{\r\n    state = {\r\n        lightInfo: \"\",\r\n        lightLabels: [],\r\n        token: `Bearer ${this.props.apiKey}`,\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.getData();\r\n    }\r\n\r\n    componenetDidUpdate(){\r\n        console.log(\"update\")\r\n    }\r\n\r\n    getData(){\r\n        const url = \"https://api.lifx.com/v1/lights/all\";\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': this.state.token\r\n            },\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightProps) => {\r\n \r\n                this.setState({lightInfo: lightProps})\r\n                \r\n                for (let i = 0; i < this.state.lightInfo.length; i++){\r\n                    var joined = this.state.lightLabels.concat(this.state.lightInfo[i]['label']);\r\n                    this.setState({ lightLabels: joined })\r\n                }             \r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });    \r\n    }\r\n\r\n\r\n    getChildState(data){\r\n        this.setState({lightInfo: data})\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            \r\n            <Accordion>\r\n                {this.state.lightLabels.map(listitem => (\r\n                    <Card key={listitem}>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} style={{textDecoration: \"none\"}} variant=\"link\" eventKey={this.state.lightLabels.indexOf(listitem).toString()}>\r\n                                {/* Displays light status component */}\r\n                                <LightStatus data={this.state}  name = {listitem}></LightStatus>\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey={this.state.lightLabels.indexOf(listitem).toString()}>\r\n                            <Card.Body>\r\n                                {/* Displays the power status and passes the id and power status of this light to the Toggle Power component */}\r\n                                <TogglePower data={this.state} name = {listitem} onGetChildState={this.getChildState.bind(this)}></TogglePower>\r\n                                <br></br>\r\n                                {/* Displays color switcher component */}\r\n                                <DisplayColor data={this.state} name={listitem} onGetChildState={this.getChildState.bind(this)}></DisplayColor>\r\n                                {/* Displays set brightness component */}\r\n                                <SetBrightness data={this.state} name={listitem} onGetChildState={this.getChildState.bind(this)}></SetBrightness>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                ))}\r\n            </Accordion>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListLights;","import {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ListLights from '../ListLights/ListLights';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\n\r\nconst url = \"https://api.lifx.com/v1/lights/all\";\r\n\r\n\r\nclass Authorise extends Component{\r\n    static propTypes = {\r\n        cookies: instanceOf(Cookies).isRequired\r\n    };\r\n\r\n    state = {\r\n        apiKey: this.props.cookies.get('apiKey') || \"\",\r\n        authorised: this.props.cookies.get('authorised') || false,\r\n        display: this.props.cookies.get('display') || \"\",\r\n    }\r\n\r\n\r\n    onInputChange(event){\r\n        this.setState({\r\n            apiKey: event.target.value\r\n        })\r\n        this.props.cookies.set('apiKey', event.target.value, { \r\n            path: '/',\r\n            maxAge: 36000,\r\n            secure: true\r\n        });\r\n    }\r\n\r\n\r\n    onKeySubmit(){\r\n        // Attempt to call API\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${this.state.apiKey}`\r\n            },\r\n          })\r\n            .then(function(response){\r\n                if (!response.ok){\r\n                    alert(\"Invalid key. Try again.\")\r\n                    throw new Error(\"HTTP Status \" + response.status);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((jsonResponse) => {\r\n                this.setState({\r\n                    authorised: true,\r\n                    display: \"none\"\r\n                });\r\n                this.props.cookies.set('authorised', true, { \r\n                    path: '/',\r\n                    maxAge: 36000,\r\n                    secure: true\r\n                });\r\n                this.props.cookies.set('display', \"none\", { \r\n                    path: '/',\r\n                    maxAge: 36000,\r\n                    secure: true\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const isAuthorised = this.state.authorised;\r\n        let displayComponent;\r\n\r\n        if (isAuthorised){\r\n            displayComponent = <ListLights apiKey={this.state.apiKey}></ListLights>\r\n        };\r\n\r\n        return (\r\n            <div>\r\n            <div style={{width:\"300px\", margin: \"auto\", display: this.state.display}}>\r\n                <Form>\r\n                    <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                        <Form.Label>API Key</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter API key\" onChange={this.onInputChange.bind(this)} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Please enter a valid LifX API key\r\n                            \r\n                        </Form.Text>\r\n                        <Button style={{marginTop: \"10px\"}} variant=\"primary\" onClick={this.onKeySubmit.bind(this)}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n                \r\n            </div>\r\n                {displayComponent}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withCookies(Authorise);","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport React from 'react';\r\nimport Authorise from './Authorise/Authorise';\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 style={{marginTop: \"10px\"}}>LifX Light Controller</h1>\r\n      <CookiesProvider>\r\n        <Authorise></Authorise>  \r\n      </CookiesProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}