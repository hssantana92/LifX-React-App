{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\61423\\\\Documents\\\\GitHub\\\\hsantana92.github.io\\\\src\\\\SetBrightness\\\\SetBrightness.js\";\nimport { Component } from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledSlider = withStyles({\n  root: {},\n  track: {},\n  rail: {},\n  thumb: {}\n})(Slider);\n\nclass SetBrightness extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      brightness: \"1.0\",\n      lightInfo: this.props.data.lightInfo\n    };\n  }\n\n  brightnessSet() {\n    // Set constants for Light ID and Array Index\n    const arrIndex = this.props.data.lightLabels.indexOf(this.props.name);\n    const lightID = this.props.data.lightInfo[arrIndex]['id']; // Set API Call URL\n\n    const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`; // Set data to be updated depending on the selected value on the slider\n\n    const data = {\n      \"brightness\": this.state.brightness\n    }; // CALL API\n\n    fetch(urlState, {\n      method: 'PUT',\n      headers: {\n        'Authorization': this.props.data.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(lightState => {\n      console.log(lightState['results']);\n    }).catch(error => {\n      console.error(error);\n    }); // Update State Object\n\n    this.updateColorValue(this.state.brightness, arrIndex); // Update Parent State\n\n    this.updateParentState();\n  } // Method to change the value of the color key\n\n\n  updateColorValue(brightnessVal, index) {\n    let lightInfo = this.state.lightInfo;\n    lightInfo[index]['brightness'] = brightnessVal;\n    this.setState({\n      lightInfo: lightInfo\n    });\n  } // Updates the main light state in the parent component\n\n\n  updateParentState() {\n    this.props.onGetChildState(this.state.lightInfo);\n  }\n\n  valuetext(value) {\n    return value;\n  }\n\n  sliderChange(event, value) {\n    console.log(value);\n    this.setState({\n      brightness: value\n    });\n    this.brightnessSet();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        id: \"non-linear-slider\",\n        gutterBottom: true,\n        children: \"Adjust Brightness\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StyledSlider, {\n        defaultValue: this.props.data.lightInfo[this.props.data.lightLabels.indexOf(this.props.name)]['brightness'],\n        getAriaValueText: this.valuetext.bind(this),\n        onChangeCommitted: this.sliderChange.bind(this),\n        \"aria-labelledby\": \"discrete-slider-small-steps\",\n        step: 0.1,\n        marks: true,\n        min: 0.0,\n        max: 1.0,\n        valueLabelDisplay: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SetBrightness;","map":{"version":3,"sources":["C:/Users/61423/Documents/GitHub/hsantana92.github.io/src/SetBrightness/SetBrightness.js"],"names":["Component","withStyles","Slider","Typography","StyledSlider","root","track","rail","thumb","SetBrightness","state","brightness","lightInfo","props","data","brightnessSet","arrIndex","lightLabels","indexOf","name","lightID","urlState","fetch","method","headers","token","body","JSON","stringify","then","response","json","lightState","console","log","catch","error","updateColorValue","updateParentState","brightnessVal","index","setState","onGetChildState","valuetext","value","sliderChange","event","render","bind"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst StyledSlider = withStyles({\r\n    root: {\r\n    },\r\n    track: {\r\n\r\n    },\r\n    rail: {\r\n\r\n    },\r\n    thumb: {\r\n\r\n    },\r\n\r\n\r\n  })(Slider);\r\n\r\n\r\n\r\nclass SetBrightness extends Component{\r\n    state = {\r\n        brightness: \"1.0\",\r\n        lightInfo: this.props.data.lightInfo\r\n    }\r\n\r\n\r\n    brightnessSet(){     \r\n        // Set constants for Light ID and Array Index\r\n        const arrIndex = this.props.data.lightLabels.indexOf(this.props.name)\r\n        const lightID = this.props.data.lightInfo[arrIndex]['id'];   \r\n\r\n        // Set API Call URL\r\n        const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`;\r\n\r\n        // Set data to be updated depending on the selected value on the slider\r\n        const data = {\r\n            \"brightness\": this.state.brightness\r\n            }\r\n\r\n        // CALL API\r\n        fetch(urlState, {   \r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': this.props.data.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightState) => {\r\n                console.log(lightState['results'])\r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n\r\n            // Update State Object\r\n            this.updateColorValue(this.state.brightness, arrIndex)\r\n\r\n            // Update Parent State\r\n            this.updateParentState()\r\n    }\r\n\r\n    // Method to change the value of the color key\r\n    updateColorValue(brightnessVal, index){\r\n        let lightInfo = this.state.lightInfo;\r\n        lightInfo[index]['brightness'] = brightnessVal;\r\n        this.setState({lightInfo : lightInfo})\r\n    }\r\n\r\n    // Updates the main light state in the parent component\r\n    updateParentState(){\r\n        this.props.onGetChildState(this.state.lightInfo);\r\n    }\r\n\r\n    valuetext(value) {\r\n        return value;\r\n    }\r\n\r\n    sliderChange(event, value){\r\n        console.log(value)\r\n        this.setState({\r\n            brightness: value\r\n        })\r\n        this.brightnessSet()\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {/* <Button variant=\"primary\" onClick={this.brightnessSet.bind(this)}>Set Brightness</Button> */}\r\n                <Typography id=\"non-linear-slider\" gutterBottom>\r\n                    Adjust Brightness\r\n                </Typography>\r\n                <StyledSlider\r\n                    defaultValue={this.props.data.lightInfo[this.props.data.lightLabels.indexOf(this.props.name)]['brightness']}\r\n                    getAriaValueText={this.valuetext.bind(this)}\r\n                    onChangeCommitted={this.sliderChange.bind(this)}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={0.1}\r\n                    marks\r\n                    min={0.0}\r\n                    max={1.0}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SetBrightness;"]},"metadata":{},"sourceType":"module"}