{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\61423\\\\Documents\\\\React Apps\\\\lifx-react\\\\my-app\\\\src\\\\DisplayColor\\\\DisplayColor.js\";\nimport { Component } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar token = \"Bearer c21a99f98f3d64bce53933d23097cbd4fb880ecf476037f82be4c85eb84ce344\";\nconst StyledSlider = withStyles({\n  root: {\n    color: \"white\"\n  },\n  track: {\n    height: \"1px\",\n    background: \"linear-gradient(90deg, rgba(255,109,0,1) 0%, rgba(255,166,32,1) 16%, rgba(255,198,72,1) 32%, rgba(255,207,151,1) 48%, rgba(254,233,157,1) 64%, rgba(254,248,224,1) 80%, rgba(255,255,255,1) 96%)\"\n  },\n  rail: {\n    background: \"linear-gradient(90deg, rgba(255,109,0,1) 0%, rgba(255,166,32,1) 16%, rgba(255,198,72,1) 32%, rgba(255,207,151,1) 48%, rgba(254,233,157,1) 64%, rgba(254,248,224,1) 80%, rgba(255,255,255,1) 96%)\",\n    height: \"10px\"\n  },\n  thumb: {\n    marginTop: .01,\n    border: \"1px solid grey\",\n    color: \"black\",\n    backgroundColor: \"white\"\n  }\n})(Slider);\nconst arrIndex = this.props.data.lightLabels.indexOf(this.props.name);\nconst lightID = this.props.data.lightInfo[arrIndex]['id'];\n\nclass DisplayColor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lightColor: \"kelvin:3500\",\n      lightInfo: this.props.lightInfo\n    };\n  }\n\n  switchColor() {\n    // Set constants for Light ID and Array Index\n    // Set API Call URL\n    const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`; // Set data to be updated depending on the selected value on the slider\n\n    const data = {\n      \"color\": this.state.lightColor\n    }; // CALL API\n\n    fetch(urlState, {\n      method: 'PUT',\n      headers: {\n        'Authorization': token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(lightState => {\n      console.log(lightState['results']);\n    }).catch(error => {\n      console.error(error);\n    }); // Update State Object\n\n    this.updateColorValue(this.state.lightColor, arrIndex); // Update Parent State\n\n    this.updateParentState();\n  } // Method to change the value of the color key\n\n\n  updateColorValue(colorVal, index) {\n    let lightInfo = this.state.lightInfo;\n    lightInfo[index]['color'] = colorVal;\n    this.setState({\n      lightInfo: lightInfo\n    });\n  } // Updates the main light state in the parent component\n\n\n  updateParentState() {\n    this.props.onGetChildState(this.state.lightInfo);\n  }\n\n  valuetext(value) {\n    return `kelvin${value}`;\n  }\n\n  sliderChange(event, value) {\n    console.log(value);\n    this.setState({\n      lightColor: `kelvin:${value}`\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: this.switchColor.bind(this),\n        children: \"Switch Colour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StyledSlider, {\n        defaultValue: this.props.data.lightInfo[0]['color']['kelvin'],\n        getAriaValueText: this.valuetext.bind(this),\n        onChangeCommitted: this.sliderChange.bind(this),\n        \"aria-labelledby\": \"discrete-slider-small-steps\",\n        step: 500,\n        marks: true,\n        min: 1500,\n        max: 4500,\n        valueLabelDisplay: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DisplayColor;","map":{"version":3,"sources":["C:/Users/61423/Documents/React Apps/lifx-react/my-app/src/DisplayColor/DisplayColor.js"],"names":["Component","Button","withStyles","Slider","token","StyledSlider","root","color","track","height","background","rail","thumb","marginTop","border","backgroundColor","arrIndex","props","data","lightLabels","indexOf","name","lightID","lightInfo","DisplayColor","state","lightColor","switchColor","urlState","fetch","method","headers","body","JSON","stringify","then","response","json","lightState","console","log","catch","error","updateColorValue","updateParentState","colorVal","index","setState","onGetChildState","valuetext","value","sliderChange","event","render","bind"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nvar token = \"Bearer c21a99f98f3d64bce53933d23097cbd4fb880ecf476037f82be4c85eb84ce344\";\r\n\r\nconst StyledSlider = withStyles({\r\n    root: {\r\n      color: \"white\"\r\n    },\r\n    track: {\r\n        height: \"1px\",\r\n        background: \"linear-gradient(90deg, rgba(255,109,0,1) 0%, rgba(255,166,32,1) 16%, rgba(255,198,72,1) 32%, rgba(255,207,151,1) 48%, rgba(254,233,157,1) 64%, rgba(254,248,224,1) 80%, rgba(255,255,255,1) 96%)\",\r\n    },\r\n    rail: {\r\n        background: \"linear-gradient(90deg, rgba(255,109,0,1) 0%, rgba(255,166,32,1) 16%, rgba(255,198,72,1) 32%, rgba(255,207,151,1) 48%, rgba(254,233,157,1) 64%, rgba(254,248,224,1) 80%, rgba(255,255,255,1) 96%)\",\r\n        height: \"10px\",\r\n    },\r\n    thumb: {\r\n        marginTop: .01,\r\n        border: \"1px solid grey\",\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    },\r\n\r\n\r\n  })(Slider);\r\n\r\nconst arrIndex = this.props.data.lightLabels.indexOf(this.props.name)\r\nconst lightID = this.props.data.lightInfo[arrIndex]['id'];\r\n\r\n\r\nclass DisplayColor extends Component{\r\n    state = {\r\n        lightColor: \"kelvin:3500\",\r\n        lightInfo: this.props.lightInfo\r\n    }\r\n\r\n\r\n    switchColor(){\r\n        // Set constants for Light ID and Array Index\r\n\r\n        \r\n        // Set API Call URL\r\n        const urlState = `https://api.lifx.com/v1/lights/${lightID}/state`;\r\n\r\n        // Set data to be updated depending on the selected value on the slider\r\n        const data = {\r\n            \"color\": this.state.lightColor\r\n        }\r\n\r\n        // CALL API\r\n        fetch(urlState, {   \r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightState) => {\r\n                console.log(lightState['results'])\r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n\r\n            // Update State Object\r\n            this.updateColorValue(this.state.lightColor, arrIndex)\r\n\r\n            // Update Parent State\r\n            this.updateParentState()\r\n    }\r\n\r\n    // Method to change the value of the color key\r\n    updateColorValue(colorVal, index){\r\n        let lightInfo = this.state.lightInfo;\r\n        lightInfo[index]['color'] = colorVal;\r\n        this.setState({lightInfo : lightInfo})\r\n    }\r\n\r\n    // Updates the main light state in the parent component\r\n    updateParentState(){\r\n        this.props.onGetChildState(this.state.lightInfo);\r\n    }\r\n\r\n    valuetext(value) {\r\n        return `kelvin${value}`;\r\n    }\r\n\r\n    sliderChange(event, value){\r\n        console.log(value)\r\n        this.setState({\r\n            lightColor: `kelvin:${value}`\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Button variant=\"primary\" onClick={this.switchColor.bind(this)}>Switch Colour</Button>\r\n                <StyledSlider\r\n                    defaultValue={this.props.data.lightInfo[0]['color']['kelvin']}\r\n                    getAriaValueText={this.valuetext.bind(this)}\r\n                    onChangeCommitted={this.sliderChange.bind(this)}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={500}\r\n                    marks\r\n                    min={1500}\r\n                    max={4500}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayColor;"]},"metadata":{},"sourceType":"module"}