{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\61423\\\\Documents\\\\React Apps\\\\lifx-react\\\\my-app\\\\src\\\\ListLights\\\\ListLights.js\";\nimport { Component } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Accordion from 'react-bootstrap/Accordion';\nimport TogglePower from \"../TogglePower/TogglePower\";\nimport DisplayColor from \"../DisplayColor/DisplayColor\";\nimport LightStatus from \"../LightStatus/LightStatus\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar token = \"Bearer c21a99f98f3d64bce53933d23097cbd4fb880ecf476037f82be4c85eb84ce344\";\n\nclass ListLights extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lightInfo: \"\",\n      lightLabels: [],\n      power: \"off\"\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData() {\n    const url = \"https://api.lifx.com/v1/lights/all\";\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': token\n      }\n    }).then(response => response.json()).then(lightProps => {\n      this.setState({\n        lightInfo: lightProps\n      });\n\n      for (let i = 0; i < this.state.lightInfo.length; i++) {\n        var joined = this.state.lightLabels.concat(this.state.lightInfo[i]['label']);\n        this.setState({\n          lightLabels: joined\n        });\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  handleChange(word) {\n    this.setState({\n      power: word\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Accordion, {\n      children: this.state.lightLabels.map(listitem => /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: /*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n            as: Button,\n            variant: \"link\",\n            eventKey: this.state.lightLabels.indexOf(listitem).toString(),\n            children: listitem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n          eventKey: this.state.lightLabels.indexOf(listitem).toString(),\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(LightStatus, {\n              data: this.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TogglePower, {\n              data: this.state,\n              name: listitem,\n              try: this.state.liftUp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DisplayColor, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, listitem, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ListLights;","map":{"version":3,"sources":["C:/Users/61423/Documents/React Apps/lifx-react/my-app/src/ListLights/ListLights.js"],"names":["Component","Button","Card","Accordion","TogglePower","DisplayColor","LightStatus","token","ListLights","state","lightInfo","lightLabels","power","componentDidMount","getData","url","fetch","method","headers","then","response","json","lightProps","setState","i","length","joined","concat","catch","error","console","handleChange","word","render","map","listitem","indexOf","toString","liftUp"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport TogglePower from \"../TogglePower/TogglePower\";\r\nimport DisplayColor from \"../DisplayColor/DisplayColor\";\r\nimport LightStatus from \"../LightStatus/LightStatus\";\r\n\r\n\r\nvar token = \"Bearer c21a99f98f3d64bce53933d23097cbd4fb880ecf476037f82be4c85eb84ce344\";\r\n\r\nclass ListLights extends Component{\r\n    state = {\r\n        lightInfo: \"\",\r\n        lightLabels: [],\r\n        power: \"off\",\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.getData();\r\n    }\r\n\r\n    getData(){\r\n        const url = \"https://api.lifx.com/v1/lights/all\";\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': token\r\n            },\r\n          })\r\n            .then(response => response.json())\r\n            .then((lightProps) => {\r\n \r\n                this.setState({lightInfo: lightProps})\r\n                \r\n                for (let i = 0; i < this.state.lightInfo.length; i++){\r\n                    var joined = this.state.lightLabels.concat(this.state.lightInfo[i]['label']);\r\n                    this.setState({ lightLabels: joined })\r\n                }             \r\n              })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });    \r\n    }\r\n\r\n\r\n    handleChange(word){\r\n        this.setState({power:word})\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            \r\n            <Accordion>\r\n                {this.state.lightLabels.map(listitem => (\r\n                    <Card key={listitem}>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey={this.state.lightLabels.indexOf(listitem).toString()}>\r\n                                {listitem}\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey={this.state.lightLabels.indexOf(listitem).toString()}>\r\n                            <Card.Body>\r\n                                \r\n                                {/* Displays light status component */}\r\n                                <LightStatus data={this.state}></LightStatus>\r\n                                <br></br>\r\n                                {/* Displays the power status and passes the id and power status of this light to the Toggle Power component */}\r\n                                <TogglePower data={this.state} name = {listitem} try={this.state.liftUp}></TogglePower>\r\n                                {/* //this.state.lightInfo[this.state.lightLabels.indexOf(listitem)]['id'] */}\r\n                                <br></br>\r\n                                {/* Displays color switcher component */}\r\n                                <DisplayColor></DisplayColor>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                ))}\r\n            </Accordion>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListLights;"]},"metadata":{},"sourceType":"module"}